# autogenerated code
from marshmallow.utils import missing
from ansys.rep.client.common import Object
from ..schema.task_definition import ResourceRequirementsSchema
from ..schema.task_definition import SoftwareSchema
from ..schema.task_definition import SuccessCriteriaSchema
from ..schema.task_definition import LicensingSchema
from ..schema.task_definition import TaskDefinitionSchema

class ResourceRequirements(Object):
    """ResourceRequirements resource.

    Parameters
    ----------
    platform : str, optional
    memory : int, optional
    cpu_core_usage : float, optional
    disk_space : int, optional
    custom : dict, optional

    """

    class Meta:
        schema = ResourceRequirementsSchema
        rest_name = "None"

    def __init__(self, **kwargs):
        self.platform = missing
        self.memory = missing
        self.cpu_core_usage = missing
        self.disk_space = missing
        self.custom = missing

        super().__init__(**kwargs)

ResourceRequirementsSchema.Meta.object_class = ResourceRequirements

class Software(Object):
    """Software resource.

    Parameters
    ----------
    name : str
        Application's name.
    version : str, optional
        Application's version.

    """

    class Meta:
        schema = SoftwareSchema
        rest_name = "None"

    def __init__(self, **kwargs):
        self.name = missing
        self.version = missing

        super().__init__(**kwargs)

SoftwareSchema.Meta.object_class = Software

class SuccessCriteria(Object):
    """SuccessCriteria resource.

    Parameters
    ----------
    return_code : int, optional
        The process exit code that must be returned by the executed command.
    expressions : list, optional
        A list of expressions to be evaluated.
    required_output_file_ids : list[str], optional
        List of IDs of required output files.
    require_all_output_files : bool, optional
        Flag to require all output files.
    required_output_parameter_ids : list[str], optional
        List of names of required output parameters.
    require_all_output_parameters : bool, optional
        Flag to require all output parameters.

    """

    class Meta:
        schema = SuccessCriteriaSchema
        rest_name = "None"

    def __init__(self, **kwargs):
        self.return_code = missing
        self.expressions = missing
        self.required_output_file_ids = missing
        self.require_all_output_files = missing
        self.required_output_parameter_ids = missing
        self.require_all_output_parameters = missing

        super().__init__(**kwargs)

SuccessCriteriaSchema.Meta.object_class = SuccessCriteria

class Licensing(Object):
    """Licensing resource.

    Parameters
    ----------
    enable_shared_licensing : bool, optional
        Whether to enable shared licensing contexts for Ansys simulations

    """

    class Meta:
        schema = LicensingSchema
        rest_name = "None"

    def __init__(self, **kwargs):
        self.enable_shared_licensing = missing

        super().__init__(**kwargs)

LicensingSchema.Meta.object_class = Licensing

class TaskDefinition(Object):
    """TaskDefinition resource.

    Parameters
    ----------
    id : str, optional
        Unique ID to access the resource, generated internally by the server on creation.
    name : str, optional
        Name.
    execution_command : str, optional
        Command to execute (command or execution script is required).
    use_execution_script : bool, optional
        Whether to run task with the execution command or the execution script.
    execution_script_id : str, optional
        Script to execute (command or execution script is required).
    execution_level : int
        Define execution level for this task.
    execution_context : dict, optional
        Additional arguments to pass to the executing command
    environment : dict, optional
        Environment variables to set for the executed process
    max_execution_time : float, optional
        Maximum time in seconds for executing the task.
    num_trials : int, optional
        Maximum number of attempts to execute the task.
    store_output : bool, optional
        Specify whether to store the standard output of the task.
    input_file_ids : list[str]
        List of IDs of input files.
    output_file_ids : list[str]
        List of IDs of output files.
    success_criteria : SuccessCriteria, optional
    licensing : Licensing, optional
        A :class:`Licensing` object.
    software_requirements : Software, optional
        A list of :class:`Software` objects.
    resource_requirements : ResourceRequirements, optional
        A :class:`ResourceRequirements` object.

    """

    class Meta:
        schema = TaskDefinitionSchema
        rest_name = "task_definitions"

    def __init__(self, **kwargs):
        self.id = missing
        self.name = missing
        self.execution_command = missing
        self.use_execution_script = missing
        self.execution_script_id = missing
        self.execution_level = missing
        self.execution_context = missing
        self.environment = missing
        self.max_execution_time = missing
        self.num_trials = missing
        self.store_output = missing
        self.input_file_ids = missing
        self.output_file_ids = missing
        self.success_criteria = missing
        self.licensing = missing
        self.software_requirements = missing
        self.resource_requirements = missing

        super().__init__(**kwargs)

TaskDefinitionSchema.Meta.object_class = TaskDefinition
