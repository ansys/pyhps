# generated by datamodel-codegen:
#   filename:  jms.json
#   timestamp: 2022-09-01T06:53:43+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class DesignExplorationAlgorithm(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = None
    creation_time: Optional[datetime] = None
    name: Optional[str] = None
    description: Optional[str] = None
    data: Optional[str] = None
    job_ids: Optional[List[int]] = Field(None, example='[1, 10, 22]')


class Level(Enum):
    debug = 'DEBUG'
    info = 'INFO'
    warning = 'WARNING'
    error = 'ERROR'


class OperationMessage(BaseModel):
    what: Optional[str] = Field(None, description='Message content')
    level: Optional[Level] = Field(None, description='Log level of the message')
    timestamp: Optional[datetime] = Field(None, description='UTC timestamp')


class DesignExplorationAlgorithmContainer(BaseModel):
    algorithms: Optional[List[DesignExplorationAlgorithm]] = None
    messages: Optional[List[OperationMessage]] = None


class File(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = Field(
        None, description='Last time the object was modified, in UTC'
    )
    creation_time: Optional[datetime] = Field(
        None, description='Time when the object was created, in UTC'
    )
    name: Optional[str] = Field(None, description='Name of the file')
    type: Optional[str] = Field(None, description='MIME type of the file, ie. text/plain')
    storage_id: Optional[str] = Field(
        None, description="File's identifier in the (orthogonal) file storage system"
    )
    size: Optional[int] = Field(None, description='Size in bytes')
    hash: Optional[str] = Field(None, description='Calculated md5 checksum of the data')
    format: Optional[str] = None
    evaluation_path: Optional[str] = Field(
        None, description='Path under which the file is expected to be found during evaluation'
    )
    monitor: Optional[bool] = Field(
        None, description="Should the file's contents be live monitored"
    )
    collect: Optional[bool] = Field(None, description='Should files be collected per job')
    collect_interval: Optional[int] = Field(
        None,
        description="Frequency with which jobs should be collected. Limited by the evaluator's settings. 0/None - let the evaluator decide, other value - interval in seconds",
    )
    reference_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    expiry_time: Optional[datetime] = None


class FileContainer(BaseModel):
    files: Optional[List[File]] = None
    messages: Optional[List[OperationMessage]] = None


class Type(Enum):
    design_objective = 'design_objective'
    limit_constraint = 'limit_constraint'
    target_constraint = 'target_constraint'


class FitnessTermDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    expression: Optional[str] = None
    type: Optional[Type] = None
    weighting_factor: Optional[float] = None


class FitnessDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    fitness_term_definitions: Optional[List[FitnessTermDefinition]] = None
    error_fitness: Optional[float] = None


class EvalStatus(Enum):
    inactive = 'inactive'
    pending = 'pending'
    prolog = 'prolog'
    running = 'running'
    evaluated = 'evaluated'
    failed = 'failed'
    aborted = 'aborted'
    timeout = 'timeout'


class Job(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = None
    creation_time: Optional[datetime] = None
    name: Optional[str] = None
    job_definition_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    eval_status: Optional[EvalStatus] = None
    priority: Optional[int] = None
    values: Optional[Dict[str, Union[float, float, bool, str]]] = Field(
        None,
        description='Mapping of parameter names to values',
        example={'param_1': 12.3, 'param_2': 'unspecified'},
    )
    fitness: Optional[float] = None
    fitness_term_values: Optional[Dict[str, float]] = Field(
        None,
        description='Mapping of fitness term names to values',
        example={'value_1': 2.3, 'value_2': 3.3},
    )
    note: Optional[str] = None
    creator: Optional[str] = None
    executed_level: Optional[int] = None
    file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    elapsed_time: Optional[float] = None
    evaluator_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )


class JobContainer(BaseModel):
    jobs: Optional[List[Job]] = None
    messages: Optional[List[OperationMessage]] = None


class JobDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = None
    creation_time: Optional[datetime] = None
    name: Optional[str] = None
    parameter_definition_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    task_definition_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    parameter_mapping_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    fitness_definition: Optional[FitnessDefinition] = None
    client_hash: Optional[str] = None
    active: Optional[bool] = None


class JobDefinitionContainer(BaseModel):
    job_definitions: Optional[List[JobDefinition]] = None
    messages: Optional[List[OperationMessage]] = None


class JobDownload(BaseModel):
    files: Optional[List[str]] = Field(
        None,
        description='Names of files belonging to this job. Can be used to retrieve the files from the file storage',
        example=['my_input_file_dp2', 'generated_output_dp2'],
    )


class JobSelection(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = None
    creation_time: Optional[datetime] = None
    name: Optional[str] = None
    algorithm_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    object_ids: Optional[List[str]] = Field(None, example='[1, 10, 22]')


class JobSelectionContainer(BaseModel):
    job_selections: Optional[List[JobSelection]] = None
    messages: Optional[List[OperationMessage]] = None


class LicenseContext(BaseModel):
    context_id: Optional[str] = None
    environment: Optional[Dict[str, Any]] = None


class LicenseContextContainer(BaseModel):
    license_contexts: Optional[List[LicenseContext]] = None


class ParameterDefinition(BaseModel):
    pass


class ParameterDefinitionContainer(BaseModel):
    parameter_definitions: Optional[List[ParameterDefinition]] = None
    messages: Optional[List[OperationMessage]] = None


class ParameterMapping(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    line: Optional[int] = None
    column: Optional[int] = None
    key_string: Optional[str] = None
    float_field: Optional[str] = None
    width: Optional[int] = None
    precision: Optional[int] = None
    tokenizer: Optional[str] = None
    decimal_symbol: Optional[str] = None
    digit_grouping_symbol: Optional[str] = None
    string_quote: Optional[str] = None
    true_string: Optional[str] = None
    false_string: Optional[str] = None
    parameter_definition_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    file_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    task_definition_property: Optional[str] = None


class ParameterMappingContainer(BaseModel):
    parameter_mappings: Optional[List[ParameterMapping]] = None
    messages: Optional[List[OperationMessage]] = None


class SourceIds(BaseModel):
    source_ids: Optional[List[int]] = Field(
        None, description='Identifiers of objects to operate on', example=[10, 25, 1]
    )


class EvalStatus1(Enum):
    inactive = 'inactive'
    pending = 'pending'
    prolog = 'prolog'
    running = 'running'
    evaluated = 'evaluated'
    failed = 'failed'
    aborted = 'aborted'
    timeout = 'timeout'


class Task(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = None
    creation_time: Optional[datetime] = None
    pending_time: Optional[datetime] = None
    prolog_time: Optional[datetime] = None
    running_time: Optional[datetime] = None
    finished_time: Optional[datetime] = None
    eval_status: Optional[EvalStatus1] = None
    trial_number: Optional[int] = None
    elapsed_time: Optional[Any] = None
    task_definition_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    job_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    host_id: Optional[str] = None
    input_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    output_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    inherited_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    owned_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    monitored_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    license_context_id: Optional[str] = None
    executed_command: Optional[str] = None
    task_definition_snapshot: Optional[Dict[str, Any]] = None


class TaskContainer(BaseModel):
    tasks: Optional[List[Task]] = None
    messages: Optional[List[OperationMessage]] = None


class ResourceRequirements(BaseModel):
    platform: Optional[str] = None
    memory: Optional[int] = None
    cpu_core_usage: Optional[float] = None
    disk_space: Optional[int] = None
    custom: Optional[Dict[str, Any]] = None


class Licensing(BaseModel):
    enable_shared_licensing: Optional[bool] = None


class TaskDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    execution_command: Optional[str] = None
    use_execution_script: Optional[bool] = None
    execution_script_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    execution_level: Optional[int] = None
    max_execution_time: Optional[float] = None
    execution_context: Optional[Dict[str, Any]] = None
    environment: Optional[Dict[str, Any]] = None
    software_requirements: Optional[Any] = None
    resource_requirements: Optional[ResourceRequirements] = None
    num_trials: Optional[int] = None
    store_output: Optional[bool] = None
    input_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    output_file_ids: Optional[List[str]] = Field(
        None, example=['02pUBHzxkRCjfnicmwYA95', '02pUBHzxaTAjFYyzwVPmN9', '02pUBI08mUM1G64FJ2Ld0q']
    )
    success_criteria: Optional[Any] = None
    licensing: Optional[Licensing] = None


class TaskDefinitionContainer(BaseModel):
    task_definitions: Optional[List[TaskDefinition]] = None
    messages: Optional[List[OperationMessage]] = None


class TaskLicenseContext(BaseModel):
    environments: Optional[Dict[str, Any]] = None
    tasks: Optional[List[Task]] = None
    messages: Optional[List[OperationMessage]] = None


class Type1(Enum):
    bool = 'bool'


class BoolParameterDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    type: Optional[Type1] = None
    mode: Optional[Any] = None
    default: Optional[bool] = None
    quantity_name: Optional[str] = None
    units: Optional[str] = None
    display_text: Optional[str] = None


class Type2(Enum):
    float = 'float'


class FloatParameterDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    type: Optional[Type2] = None
    mode: Optional[Any] = None
    default: Optional[float] = None
    lower_limit: Optional[float] = None
    upper_limit: Optional[float] = None
    step: Optional[float] = None
    cyclic: Optional[bool] = None
    quantity_name: Optional[str] = None
    units: Optional[str] = None
    display_text: Optional[str] = None
    value_list: Optional[List[float]] = None


class Type3(Enum):
    int = 'int'


class IntParameterDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    type: Optional[Type3] = None
    mode: Optional[Any] = None
    default: Optional[int] = None
    lower_limit: Optional[int] = None
    upper_limit: Optional[int] = None
    step: Optional[int] = None
    cyclic: Optional[bool] = None
    quantity_name: Optional[str] = None
    units: Optional[str] = None
    display_text: Optional[str] = None


class Type4(Enum):
    string = 'string'


class StringParameterDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    name: Optional[str] = None
    type: Optional[Type4] = None
    mode: Optional[Any] = None
    default: Optional[str] = None
    quantity_name: Optional[str] = None
    units: Optional[str] = None
    display_text: Optional[str] = None
    value_list: Optional[List[str]] = None


class PermissionType(Enum):
    user = 'user'
    group = 'group'
    anyone = 'anyone'


class Role(Enum):
    admin = 'admin'
    writer = 'writer'
    reader = 'reader'


class AccessControl(BaseModel):
    value_name: Optional[str] = Field(None, description="The user's name", example='John')
    permission_type: PermissionType
    value_id: str = Field(..., description='The ID assigned to the user')
    role: Role


class AccessControlContainer(BaseModel):
    permissions: Optional[List[AccessControl]] = None


class ApplyTemplate(BaseModel):
    template_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )
    execution_level: Optional[int] = None
    job_definition_id: Optional[str] = Field(
        None, description='ID of referenced object', example='02pVAYjmgXZGpEPPBNhRVo'
    )


class ApplyTemplates(BaseModel):
    project_id: Optional[str] = None
    targets: Optional[List[ApplyTemplate]] = None


class ProjectAssignmentMode(Enum):
    disabled = 'disabled'
    all_active = 'all_active'
    project_list = 'project_list'


class EvaluatorRegistration(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Object's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    host_id: Optional[str] = None
    name: Optional[str] = None
    hostname: Optional[str] = None
    platform: Optional[str] = None
    task_manager_type: Optional[str] = None
    project_server_select: Optional[bool] = None
    alive_update_interval: Optional[int] = None
    update_time: Optional[datetime] = None
    external_access_port: Optional[int] = None
    project_assignment_mode: Optional[ProjectAssignmentMode] = None
    project_list: Optional[Any] = None
    configuration: Optional[Dict[str, Any]] = None


class EvaluatorRegistrationContainer(BaseModel):
    evaluators: List[EvaluatorRegistration]
    messages: Optional[List[OperationMessage]] = None


class Statistics(BaseModel):
    eval_status: Optional[Dict[str, Any]] = Field(
        None, description='Mapping of evaluation status name to number of jobs in that state'
    )
    num_jobs: Optional[int] = None
    files_size: Optional[int] = Field(None, description='Total size of all registered files')


class Project(BaseModel):
    creation_time: Optional[datetime] = Field(
        None, description='Time when the project was created, in UTC'
    )
    permissions: Optional[List[AccessControl]] = None
    active: Optional[bool] = None
    name: Optional[str] = Field(None, description='A label for the project')
    priority: Optional[int] = None
    id: Optional[str] = Field(
        None,
        description="Project's identifier, assigned by the server at creation time. Not controlled by the user",
    )
    modification_time: Optional[datetime] = Field(
        None, description='Last time the project was modified, in UTC'
    )
    file_storages: Optional[List[Dict[str, Any]]] = None
    statistics: Optional[Statistics] = None


class ProjectContainer(BaseModel):
    replace: Optional[bool] = None
    projects: Optional[List[Project]] = None
    messages: Optional[List[OperationMessage]] = None


class ProjectRestore(BaseModel):
    id: Optional[str] = Field(None, description='ID of the project to restore into')
    import_storage_backends: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="Optional list of storage backend definitions that should be used instead of what's stored on the project or the server defaults",
        example='...',
    )
    backend_path: Optional[str] = Field(
        None,
        description='Backend path to the archive containing the project',
        example='ansfs://project_archives/my_project.tgz',
    )


class ProjectArchive(BaseModel):
    backend_path: Optional[str] = Field(
        None,
        description='Backend path under which an archive containing the project can be found',
        example='ansfs://archived_project/my_project.tgz',
    )


class ProjectCopy(BaseModel):
    project_name: Optional[str] = Field(
        None, description='Name to assign to the copied project', example='my_new_project'
    )


class Operation(BaseModel):
    succeeded: Optional[Any] = None
    end_time: Optional[Any] = None
    name: Optional[str] = None
    result: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    progress: Optional[float] = None
    finished: Optional[Any] = None
    status: Optional[str] = None
    start_time: Optional[Any] = None
    messages: Optional[List[OperationMessage]] = None


class OperationContainer(BaseModel):
    operations: List[Operation]
