{
    "servers": [
        {
            "url": "//localhost",
            "description": "Local server"
        }
    ],
    "info": {
        "description": "Revision 1.0.0.0\n# Introduction\nThis is a work-in-progress version of the Design Point Service documentation.\n# Authentication\nAuthentication is achieved using OAuth2 tokens.\n\n<SecurityDefinitions />\n",
        "title": "Job Management Service",
        "version": "0.1.4"
    },
    "components": {
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header"
            }
        },
        "schemas": {
            "DesignExplorationAlgorithm": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "type": "string",
                        "nullable": true
                    },
                    "job_ids": {
                        "example": "[1, 10, 22]",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "OperationMessage": {
                "type": "object",
                "properties": {
                    "what": {
                        "type": "string",
                        "description": "Message content"
                    },
                    "level": {
                        "description": "Log level of the message",
                        "type": "string",
                        "enum": [
                            "DEBUG",
                            "INFO",
                            "WARNING",
                            "ERROR"
                        ]
                    },
                    "timestamp": {
                        "nullable": true,
                        "description": "UTC timestamp",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "DesignExplorationAlgorithmContainer": {
                "type": "object",
                "properties": {
                    "algorithms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DesignExplorationAlgorithm"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "File": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Last time the object was modified, in UTC"
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Time when the object was created, in UTC"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the file"
                    },
                    "type": {
                        "type": "string",
                        "nullable": true,
                        "description": "MIME type of the file, ie. text/plain"
                    },
                    "storage_id": {
                        "type": "string",
                        "nullable": true,
                        "description": "File's identifier in the (orthogonal) file storage system"
                    },
                    "size": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Size in bytes"
                    },
                    "hash": {
                        "type": "string",
                        "nullable": true,
                        "description": "Calculated md5 checksum of the data"
                    },
                    "format": {
                        "type": "string",
                        "nullable": true
                    },
                    "evaluation_path": {
                        "type": "string",
                        "nullable": true,
                        "description": "Path under which the file is expected to be found during evaluation"
                    },
                    "monitor": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Should the file's contents be live monitored"
                    },
                    "collect": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Should files be collected per job"
                    },
                    "collect_interval": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Frequency with which jobs should be collected. Limited by the evaluator's settings. 0/None - let the evaluator decide, other value - interval in seconds"
                    },
                    "reference_id": {
                        "nullable": true,
                        "description": "ID of referenced object",
                        "type": "string",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "expiry_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "FileContainer": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/File"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "FitnessTermDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "expression": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "design_objective",
                            "limit_constraint",
                            "target_constraint"
                        ],
                        "nullable": true
                    },
                    "weighting_factor": {
                        "type": "number",
                        "nullable": true
                    }
                }
            },
            "FitnessDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "fitness_term_definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FitnessTermDefinition"
                        }
                    },
                    "error_fitness": {
                        "type": "number"
                    }
                }
            },
            "Job": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "job_definition_id": {
                        "description": "ID of referenced object",
                        "type": "string",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "eval_status": {
                        "type": "string",
                        "enum": [
                            "inactive",
                            "pending",
                            "prolog",
                            "running",
                            "evaluated",
                            "failed",
                            "aborted",
                            "timeout"
                        ]
                    },
                    "priority": {
                        "type": "integer",
                        "nullable": true
                    },
                    "values": {
                        "type": "object",
                        "additionalProperties": {
                            "oneOf": [
                                {
                                    "type": "number",
                                    "format": "float"
                                },
                                {
                                    "type": "number",
                                    "format": "integer"
                                },
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "description": "Mapping of parameter names to values",
                        "example": {
                            "param_1": 12.3,
                            "param_2": "unspecified"
                        }
                    },
                    "fitness": {
                        "type": "number",
                        "nullable": true
                    },
                    "fitness_term_values": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "float"
                        },
                        "description": "Mapping of fitness term names to values",
                        "example": {
                            "value_1": 2.3,
                            "value_2": 3.3
                        }
                    },
                    "note": {
                        "type": "string",
                        "nullable": true
                    },
                    "creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "executed_level": {
                        "type": "integer",
                        "nullable": true
                    },
                    "file_ids": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "elapsed_time": {
                        "type": "number",
                        "readOnly": true
                    },
                    "evaluator_ids": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    }
                }
            },
            "JobContainer": {
                "type": "object",
                "properties": {
                    "jobs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Job"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "JobDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "parameter_definition_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "task_definition_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "parameter_mapping_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "fitness_definition": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FitnessDefinition"
                            }
                        ]
                    },
                    "client_hash": {
                        "type": "string",
                        "nullable": true
                    },
                    "active": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "JobDefinitionContainer": {
                "type": "object",
                "properties": {
                    "job_definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JobDefinition"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "JobDownload": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "readOnly": true,
                        "description": "Names of files belonging to this job. Can be used to retrieve the files from the file storage",
                        "example": [
                            "my_input_file_dp2",
                            "generated_output_dp2"
                        ],
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "JobSelection": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "algorithm_id": {
                        "nullable": true,
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "object_ids": {
                        "example": "[1, 10, 22]",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "JobSelectionContainer": {
                "type": "object",
                "properties": {
                    "job_selections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JobSelection"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "LicenseContext": {
                "type": "object",
                "properties": {
                    "context_id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "environment": {
                        "type": "object"
                    }
                }
            },
            "LicenseContextContainer": {
                "type": "object",
                "properties": {
                    "license_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LicenseContext"
                        }
                    }
                }
            },
            "ParameterDefinition": {
                "type": "object",
                "properties": {}
            },
            "ParameterDefinitionContainer": {
                "type": "object",
                "properties": {
                    "parameter_definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ParameterDefinition"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "ParameterMapping": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "line": {
                        "type": "integer",
                        "nullable": true
                    },
                    "column": {
                        "type": "integer",
                        "nullable": true
                    },
                    "key_string": {
                        "type": "string",
                        "nullable": true
                    },
                    "float_field": {
                        "type": "string",
                        "nullable": true
                    },
                    "width": {
                        "type": "integer",
                        "nullable": true
                    },
                    "precision": {
                        "type": "integer",
                        "nullable": true
                    },
                    "tokenizer": {
                        "type": "string",
                        "nullable": true
                    },
                    "decimal_symbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "digit_grouping_symbol": {
                        "type": "string",
                        "nullable": true
                    },
                    "string_quote": {
                        "type": "string",
                        "nullable": true
                    },
                    "true_string": {
                        "type": "string",
                        "nullable": true
                    },
                    "false_string": {
                        "type": "string",
                        "nullable": true
                    },
                    "parameter_definition_id": {
                        "nullable": true,
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "task_definition_property": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "ParameterMappingContainer": {
                "type": "object",
                "properties": {
                    "parameter_mappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ParameterMapping"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "SourceIds": {
                "type": "object",
                "properties": {
                    "source_ids": {
                        "type": "array",
                        "description": "Identifiers of objects to operate on",
                        "example": [
                            10,
                            25,
                            1
                        ],
                        "items": {
                            "type": "integer"
                        }
                    }
                }
            },
            "Task": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "pending_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "prolog_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "running_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "finished_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true
                    },
                    "eval_status": {
                        "type": "string",
                        "enum": [
                            "inactive",
                            "pending",
                            "prolog",
                            "running",
                            "evaluated",
                            "failed",
                            "aborted",
                            "timeout"
                        ],
                        "nullable": true
                    },
                    "trial_number": {
                        "type": "integer",
                        "nullable": true
                    },
                    "elapsed_time": {
                        "readOnly": true
                    },
                    "task_definition_id": {
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "job_id": {
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "host_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "input_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "output_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "inherited_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "owned_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "monitored_file_ids": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "license_context_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "executed_command": {
                        "type": "string",
                        "nullable": true
                    },
                    "task_definition_snapshot": {
                        "type": "object",
                        "nullable": true
                    }
                }
            },
            "TaskContainer": {
                "type": "object",
                "properties": {
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "ResourceRequirements": {
                "type": "object",
                "properties": {
                    "platform": {
                        "type": "string",
                        "nullable": true
                    },
                    "memory": {
                        "type": "integer",
                        "nullable": true
                    },
                    "cpu_core_usage": {
                        "type": "number",
                        "nullable": true
                    },
                    "disk_space": {
                        "type": "integer",
                        "nullable": true
                    },
                    "custom": {
                        "type": "object",
                        "nullable": true
                    }
                }
            },
            "Licensing": {
                "type": "object",
                "properties": {
                    "enable_shared_licensing": {
                        "type": "boolean",
                        "nullable": true
                    }
                }
            },
            "TaskDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "execution_command": {
                        "type": "string",
                        "nullable": true
                    },
                    "use_execution_script": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "execution_script_id": {
                        "nullable": true,
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "execution_level": {
                        "type": "integer"
                    },
                    "max_execution_time": {
                        "type": "number",
                        "nullable": true
                    },
                    "execution_context": {
                        "type": "object",
                        "nullable": true
                    },
                    "environment": {
                        "type": "object",
                        "nullable": true
                    },
                    "software_requirements": {
                        "nullable": true
                    },
                    "resource_requirements": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ResourceRequirements"
                            }
                        ]
                    },
                    "num_trials": {
                        "type": "integer",
                        "nullable": true
                    },
                    "store_output": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "input_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "output_file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "ID of referenced object"
                        },
                        "example": [
                            "02pUBHzxkRCjfnicmwYA95",
                            "02pUBHzxaTAjFYyzwVPmN9",
                            "02pUBI08mUM1G64FJ2Ld0q"
                        ]
                    },
                    "success_criteria": {
                        "nullable": true
                    },
                    "licensing": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Licensing"
                            }
                        ]
                    }
                }
            },
            "TaskDefinitionContainer": {
                "type": "object",
                "properties": {
                    "task_definitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskDefinition"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "TaskLicenseContext": {
                "type": "object",
                "properties": {
                    "environments": {
                        "type": "object",
                        "readOnly": true
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "BoolParameterDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "bool"
                        ]
                    },
                    "mode": {},
                    "default": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "quantity_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "units": {
                        "type": "string",
                        "nullable": true
                    },
                    "display_text": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "FloatParameterDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "float"
                        ]
                    },
                    "mode": {},
                    "default": {
                        "type": "number",
                        "nullable": true
                    },
                    "lower_limit": {
                        "type": "number",
                        "nullable": true
                    },
                    "upper_limit": {
                        "type": "number",
                        "nullable": true
                    },
                    "step": {
                        "type": "number",
                        "nullable": true
                    },
                    "cyclic": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "quantity_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "units": {
                        "type": "string",
                        "nullable": true
                    },
                    "display_text": {
                        "type": "string",
                        "nullable": true
                    },
                    "value_list": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "number"
                        }
                    }
                }
            },
            "IntParameterDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "int"
                        ]
                    },
                    "mode": {},
                    "default": {
                        "type": "integer",
                        "nullable": true
                    },
                    "lower_limit": {
                        "type": "integer",
                        "nullable": true
                    },
                    "upper_limit": {
                        "type": "integer",
                        "nullable": true
                    },
                    "step": {
                        "type": "integer",
                        "nullable": true
                    },
                    "cyclic": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "quantity_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "units": {
                        "type": "string",
                        "nullable": true
                    },
                    "display_text": {
                        "type": "string",
                        "nullable": true
                    }
                }
            },
            "StringParameterDefinition": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "string"
                        ]
                    },
                    "mode": {},
                    "default": {
                        "type": "string",
                        "nullable": true
                    },
                    "quantity_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "units": {
                        "type": "string",
                        "nullable": true
                    },
                    "display_text": {
                        "type": "string",
                        "nullable": true
                    },
                    "value_list": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "AccessControl": {
                "type": "object",
                "properties": {
                    "value_name": {
                        "type": "string",
                        "nullable": true,
                        "description": "The user's name",
                        "example": "John"
                    },
                    "permission_type": {
                        "type": "string",
                        "enum": [
                            "user",
                            "group",
                            "anyone"
                        ]
                    },
                    "value_id": {
                        "type": "string",
                        "description": "The ID assigned to the user"
                    },
                    "role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "writer",
                            "reader"
                        ]
                    }
                },
                "required": [
                    "permission_type",
                    "role",
                    "value_id"
                ]
            },
            "AccessControlContainer": {
                "type": "object",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessControl"
                        }
                    }
                }
            },
            "ApplyTemplate": {
                "type": "object",
                "properties": {
                    "template_id": {
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    },
                    "execution_level": {
                        "type": "integer"
                    },
                    "job_definition_id": {
                        "type": "string",
                        "description": "ID of referenced object",
                        "example": "02pVAYjmgXZGpEPPBNhRVo"
                    }
                }
            },
            "ApplyTemplates": {
                "type": "object",
                "properties": {
                    "project_id": {
                        "type": "string"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplyTemplate"
                        }
                    }
                }
            },
            "EvaluatorRegistration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Object's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "host_id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "hostname": {
                        "type": "string",
                        "nullable": true
                    },
                    "platform": {
                        "type": "string",
                        "nullable": true
                    },
                    "task_manager_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "project_server_select": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "alive_update_interval": {
                        "type": "integer",
                        "nullable": true
                    },
                    "update_time": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "external_access_port": {
                        "type": "integer",
                        "nullable": true
                    },
                    "project_assignment_mode": {
                        "type": "string",
                        "enum": [
                            "disabled",
                            "all_active",
                            "project_list"
                        ],
                        "nullable": true
                    },
                    "project_list": {},
                    "configuration": {
                        "type": "object",
                        "nullable": true
                    }
                }
            },
            "EvaluatorRegistrationContainer": {
                "type": "object",
                "properties": {
                    "evaluators": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EvaluatorRegistration"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                },
                "required": [
                    "evaluators"
                ]
            },
            "Statistics": {
                "type": "object",
                "properties": {
                    "eval_status": {
                        "type": "object",
                        "description": "Mapping of evaluation status name to number of jobs in that state"
                    },
                    "num_jobs": {
                        "type": "integer"
                    },
                    "files_size": {
                        "type": "integer",
                        "description": "Total size of all registered files"
                    }
                }
            },
            "Project": {
                "type": "object",
                "properties": {
                    "creation_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Time when the project was created, in UTC"
                    },
                    "permissions": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccessControl"
                        }
                    },
                    "active": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "A label for the project"
                    },
                    "priority": {
                        "type": "integer",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true,
                        "description": "Project's identifier, assigned by the server at creation time. Not controlled by the user"
                    },
                    "modification_time": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Last time the project was modified, in UTC"
                    },
                    "file_storages": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "object"
                        }
                    },
                    "statistics": {
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Statistics"
                            }
                        ]
                    }
                }
            },
            "ProjectContainer": {
                "type": "object",
                "properties": {
                    "replace": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Project"
                        }
                    },
                    "messages": {
                        "readOnly": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "ProjectRestore": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "writeOnly": true,
                        "description": "ID of the project to restore into"
                    },
                    "import_storage_backends": {
                        "type": "array",
                        "writeOnly": true,
                        "nullable": true,
                        "description": "Optional list of storage backend definitions that should be used instead of what's stored on the project or the server defaults",
                        "example": "...",
                        "items": {
                            "type": "object"
                        }
                    },
                    "backend_path": {
                        "type": "string",
                        "description": "Backend path to the archive containing the project",
                        "example": "ansfs://project_archives/my_project.tgz"
                    }
                }
            },
            "ProjectArchive": {
                "type": "object",
                "properties": {
                    "backend_path": {
                        "type": "string",
                        "description": "Backend path under which an archive containing the project can be found",
                        "example": "ansfs://archived_project/my_project.tgz"
                    }
                }
            },
            "ProjectCopy": {
                "type": "object",
                "properties": {
                    "project_name": {
                        "type": "string",
                        "writeOnly": true,
                        "description": "Name to assign to the copied project",
                        "example": "my_new_project"
                    }
                }
            },
            "Operation": {
                "type": "object",
                "properties": {
                    "succeeded": {
                        "readOnly": true,
                        "nullable": true
                    },
                    "end_time": {
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    },
                    "result": {
                        "type": "object",
                        "nullable": true
                    },
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "progress": {
                        "type": "number",
                        "nullable": true
                    },
                    "finished": {
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "nullable": true
                    },
                    "start_time": {
                        "nullable": true
                    },
                    "messages": {
                        "nullable": true,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OperationMessage"
                        }
                    }
                }
            },
            "OperationContainer": {
                "type": "object",
                "properties": {
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Operation"
                        }
                    }
                },
                "required": [
                    "operations"
                ]
            }
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ],
    "x-tagGroups": [
        {
            "name": "Endpoints",
            "tags": [
                "root",
                "projects",
                "task_definitions",
                "parameter_definitions",
                "parameter_mappings",
                "job_definitions",
                "job_selections",
                "jobs",
                "dx_algorithms",
                "files",
                "tasks",
                "evaluators",
                "operations",
                "internal",
                "deprecated"
            ]
        },
        {
            "name": "Models",
            "tags": [
                "job_definition_schema",
                "float_parameter_definition_schema",
                "int_parameter_definition_schema",
                "bool_parameter_definition_schema",
                "string_parameter_definition_schema",
                "parameter_mapping_schema",
                "task_definition_schema",
                "fitness_definition_schema",
                "job_schema",
                "job_selection_schema",
                "design_exploration_algorithm_schema",
                "file_schema",
                "task_schema",
                "project_registration_schema",
                "evaluator_registration_schema"
            ]
        },
        {
            "name": "To-Do",
            "tags": [
                "WIP"
            ]
        }
    ],
    "tags": [
        {
            "name": "task_definitions",
            "x-displayName": "Task Definitions",
            "description": "Operations available on task definitions"
        },
        {
            "name": "parameter_definitions",
            "x-displayName": "Parameter Definitions",
            "description": "Operations available on parameter definitions"
        },
        {
            "name": "parameter_mappings",
            "x-displayName": "Parameter Mappings",
            "description": "Operations available on parameter mappings"
        },
        {
            "name": "job_definitions",
            "x-displayName": "Job Definitions",
            "description": "Operations available on job definitions"
        },
        {
            "name": "job_selections",
            "x-displayName": "Job Selections",
            "description": "Operations available on selections of design points"
        },
        {
            "name": "jobs",
            "x-displayName": "Jobs",
            "description": "Operations available on design points"
        },
        {
            "name": "dx_algorithms",
            "x-displayName": "Algorithms",
            "description": "Operations available on design exploration algorithms"
        },
        {
            "name": "files",
            "x-displayName": "Files",
            "description": "Operations available on files"
        },
        {
            "name": "projects",
            "x-displayName": "Projects",
            "description": "Operations available on projects"
        },
        {
            "name": "root",
            "x-displayName": "Root",
            "description": "Server configuration and other curiosities"
        },
        {
            "name": "tasks",
            "x-displayName": "Tasks",
            "description": "Operations available on tasks"
        },
        {
            "name": "evaluators",
            "x-displayName": "Evaluators",
            "description": "Operations available on evaluators"
        },
        {
            "name": "operations",
            "x-displayName": "Operations",
            "description": "Manipulation of asynchronous operations"
        },
        {
            "name": "internal",
            "x-displayName": "Internal",
            "description": "Intended only for internal usage"
        },
        {
            "name": "deprecated",
            "x-displayName": "Deprecated",
            "description": "Soon to be removed"
        },
        {
            "name": "WIP",
            "description": "Parts that still need work"
        },
        {
            "name": "file_schema",
            "x-displayName": "File",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/File\" />    \n"
        },
        {
            "name": "job_definition_schema",
            "x-displayName": "JobDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/JobDefinition\" />    \n"
        },
        {
            "name": "float_parameter_definition_schema",
            "x-displayName": "FloatParameterDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FloatParameterDefinition\" />    \n"
        },
        {
            "name": "int_parameter_definition_schema",
            "x-displayName": "IntParameterDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/IntParameterDefinition\" />    \n"
        },
        {
            "name": "bool_parameter_definition_schema",
            "x-displayName": "BoolParameterDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/BoolParameterDefinition\" />    \n"
        },
        {
            "name": "string_parameter_definition_schema",
            "x-displayName": "StringParameterDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/StringParameterDefinition\" />    \n"
        },
        {
            "name": "parameter_location_schema",
            "x-displayName": "ParameterMapping",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ParameterMapping\" />    \n"
        },
        {
            "name": "task_definition_schema",
            "x-displayName": "TaskDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskDefinition\" />    \n"
        },
        {
            "name": "fitness_definition_schema",
            "x-displayName": "FitnessDefinition",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FitnessDefinition\" />    \n"
        },
        {
            "name": "job_schema",
            "x-displayName": "Job",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Job\" />    \n"
        },
        {
            "name": "job_selection_schema",
            "x-displayName": "Job Selection",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/JobSelection\" />    \n"
        },
        {
            "name": "design_exploration_algorithm_schema",
            "x-displayName": "Design Exploration Algorithm",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DesignExplorationAlgorithm\" />    \n"
        },
        {
            "name": "task_schema",
            "x-displayName": "Task",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Task\" />    \n"
        },
        {
            "name": "operation_schema",
            "x-displayName": "Operation",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Operation\" />    \n"
        },
        {
            "name": "project_schema",
            "x-displayName": "Project",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Project\" />    \n"
        },
        {
            "name": "evaluator_registration_schema",
            "x-displayName": "Evaluator",
            "description": "<SchemaDefinition schemaRef=\"#/components/schemas/EvaluatorRegistration\" />    \n"
        }
    ],
    "paths": {
        "/api/v1": {
            "get": {
                "operationId": "GetServerInformation",
                "summary": "Get server information",
                "description": "Get detailed server information, including build details",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "root"
                ],
                "parameters": []
            }
        },
        "/api/v1/projects": {
            "delete": {
                "operationId": "DeleteProjects",
                "summary": "Delete projects",
                "description": "Deletes one or all projects\n\n\nAll available URIs:\n- /api/v1/projects\n- /api/v1/projects/`{project_id}`",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "project_id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "ID of the project to be deleted. If not specified all projects will be removed.\n"
                    },
                    {
                        "in": "query",
                        "name": "project_ids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Delete projects with the specified IDs"
                    }
                ]
            },
            "get": {
                "operationId": "GetProjects",
                "summary": "Get projects",
                "description": "Query detailed information about projects\n\n\nAll available URIs:\n- /api/v1/projects\n- /api/v1/projects/`{project_id}`",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "name of the project"
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "pending",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Only query projects with pending tasks. Available only when `project_id` is not specified."
                    },
                    {
                        "in": "query",
                        "name": "statistics",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Extend project information with statistics gathered by the housekeeping process. Available only when `project_id` is not specified."
                    },
                    {
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Extend project information with user access permissions. Available only when `project_id` is not specified."
                    }
                ]
            },
            "post": {
                "operationId": "CreateProjects",
                "summary": "Create projects",
                "description": "Create and register projects based on the data provided.\n\n\nAll available URIs:\n- /api/v1/projects\n- /api/v1/projects/`{project_id}`",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectContainer"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "put": {
                "operationId": "ModifyProjects",
                "summary": "Modify projects",
                "description": "Modify projects using the provided data.\n\n\nAll available URIs:\n- /api/v1/projects\n- /api/v1/projects/`{project_id}`",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "statistics",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Extend project information with statistics gathered by the housekeeping process. Available only when `project_id` is not specified."
                    },
                    {
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Extend project information with user access permissions. Available only when `project_id` is not specified."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/permissions": {
            "get": {
                "operationId": "GetPermissions",
                "summary": "Get permissions",
                "description": "Query detailed information about a project's access permissions\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessControlContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ]
            },
            "put": {
                "operationId": "ModifyPermissions",
                "summary": "Modify permissions",
                "description": "Modify access permissions for a project\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessControlContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessControlContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/archive": {
            "post": {
                "operationId": "RestoreProject",
                "summary": "Restore project",
                "description": "Restore a project from an archive\n\n\nAll available URIs:\n- /api/v1/projects/archive\n- /api/v1/projects/`{project_id}`/archive",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "202": {
                        "description": "Accepted. Operation's results can be queried using `/rep.jms/api/operations/{UUID}`. See `location` header. Response `schema`, if any, can be retrieved as part of the operation query.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Location to be appended to the base API URL (`/dcs/dcs/api`) in order to retrieve the operation's status\n",
                                "example": "/operations/2cf8af56-f50e-43b2-8553-6f6cf05c7522"
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectRestore"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "put": {
                "operationId": "ArchiveProject",
                "summary": "Archive project",
                "description": "Prepare an archive containing the project's details and data\n\n\nAll available URIs:\n- /api/v1/projects/archive\n- /api/v1/projects/`{project_id}`/archive",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "202": {
                        "description": "Accepted. Operation's results can be queried using `/rep.jms/api/operations/{UUID}`. See `location` header. Response `schema`, if any, can be retrieved as part of the operation query.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Location to be appended to the base API URL (`/dcs/dcs/api`) in order to retrieve the operation's status\n",
                                "example": "/operations/2cf8af56-f50e-43b2-8553-6f6cf05c7522"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectArchive"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "download_files",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Use \"configuration\" to only download the project's defining files, and \"all\" to download all the data. Default is \"all\""
                    }
                ]
            }
        },
        "/api/v1/projects/{project_id}/copy": {
            "put": {
                "operationId": "CopyProject",
                "summary": "Copy project",
                "description": "Create a copy of the selected project.\n",
                "tags": [
                    "projects",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "202": {
                        "description": "Accepted. Operation's results can be queried using `/rep.jms/api/operations/{UUID}`. See `location` header. Response `schema`, if any, can be retrieved as part of the operation query.",
                        "headers": {
                            "location": {
                                "schema": {
                                    "type": "string"
                                },
                                "description": "Location to be appended to the base API URL (`/dcs/dcs/api`) in order to retrieve the operation's status\n",
                                "example": "/operations/2cf8af56-f50e-43b2-8553-6f6cf05c7522"
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to be copied",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCopy"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/task_definitions": {
            "delete": {
                "operationId": "DeleteTaskDefinitions",
                "summary": "Delete task definitions",
                "description": "Delete one or more task definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/task_definitions\n- /api/v1/projects/`{project_id}`/task_definitions/`{task_definition_id}`",
                "tags": [
                    "task_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetTaskDefinitions",
                "summary": "Get task definitions",
                "description": "Query detailed information about task definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/task_definitions\n- /api/v1/projects/`{project_id}`/task_definitions/`{task_definition_id}`",
                "tags": [
                    "task_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateTaskDefinitions",
                "summary": "Create task definitions",
                "description": "Create task definitions based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/task_definitions\n- /api/v1/projects/`{project_id}`/task_definitions/`{task_definition_id}`",
                "tags": [
                    "task_definitions",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskDefinitionContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskDefinitionContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyTaskDefinitions",
                "summary": "Modify task definitions",
                "description": "Apply changes to the submitted properties of one or more task definitions.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/task_definitions\n- /api/v1/projects/`{project_id}`/task_definitions/`{task_definition_id}`",
                "tags": [
                    "task_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskDefinitionContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/parameter_definitions": {
            "delete": {
                "operationId": "DeleteParameterDefinitions",
                "summary": "Delete parameter definitions",
                "description": "Delete one or more parameter definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_definitions\n- /api/v1/projects/`{project_id}`/parameter_definitions/`{parameter_definition_id}`",
                "tags": [
                    "parameter_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetParameterDefinitions",
                "summary": "Get parameter definitions",
                "description": "Query detailed information about parameter definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_definitions\n- /api/v1/projects/`{project_id}`/parameter_definitions/`{parameter_definition_id}`",
                "tags": [
                    "parameter_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateParameterDefinitions",
                "summary": "Create parameter definitions",
                "description": "Create parameter definitions based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_definitions\n- /api/v1/projects/`{project_id}`/parameter_definitions/`{parameter_definition_id}`",
                "tags": [
                    "parameter_definitions",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterDefinitionContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterDefinitionContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyParameterDefinitions",
                "summary": "Modify parameter definitions",
                "description": "Apply changes to the submitted properties of one or more parameter definitions.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_definitions\n- /api/v1/projects/`{project_id}`/parameter_definitions/`{parameter_definition_id}`",
                "tags": [
                    "parameter_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterDefinitionContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/parameter_mappings": {
            "delete": {
                "operationId": "DeleteParameterMappings",
                "summary": "Delete parameter mappings",
                "description": "Delete one or more parameter mappings\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_mappings\n- /api/v1/projects/`{project_id}`/parameter_mappings/`{parameter_mapping_id}`",
                "tags": [
                    "parameter_mappings",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetParameterMappings",
                "summary": "Get parameter mappings",
                "description": "Query detailed information about parameter mappings\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_mappings\n- /api/v1/projects/`{project_id}`/parameter_mappings/`{parameter_mapping_id}`",
                "tags": [
                    "parameter_mappings",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterMappingContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateParameterMappings",
                "summary": "Create parameter mappings",
                "description": "Create parameter mappings based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_mappings\n- /api/v1/projects/`{project_id}`/parameter_mappings/`{parameter_mapping_id}`",
                "tags": [
                    "parameter_mappings",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterMappingContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterMappingContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyParameterMappings",
                "summary": "Modify parameter mappings",
                "description": "Apply changes to the submitted properties of one or more parameter mappings.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/parameter_mappings\n- /api/v1/projects/`{project_id}`/parameter_mappings/`{parameter_mapping_id}`",
                "tags": [
                    "parameter_mappings",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ParameterMappingContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ParameterMappingContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/job_definitions": {
            "delete": {
                "operationId": "DeleteJobDefinitions",
                "summary": "Delete job_definitions",
                "description": "Delete one or more job_definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_definitions\n- /api/v1/projects/`{project_id}`/job_definitions/`{job_definition_id}`",
                "tags": [
                    "job_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetJobDefinitions",
                "summary": "Get job_definitions",
                "description": "Query detailed information about job_definitions\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_definitions\n- /api/v1/projects/`{project_id}`/job_definitions/`{job_definition_id}`",
                "tags": [
                    "job_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateJobDefinitions",
                "summary": "Create job_definitions",
                "description": "Create job_definitions based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_definitions\n- /api/v1/projects/`{project_id}`/job_definitions/`{job_definition_id}`",
                "tags": [
                    "job_definitions",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobDefinitionContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobDefinitionContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyJobDefinitions",
                "summary": "Modify job_definitions",
                "description": "Apply changes to the submitted properties of one or more job_definitions.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_definitions\n- /api/v1/projects/`{project_id}`/job_definitions/`{job_definition_id}`",
                "tags": [
                    "job_definitions",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobDefinitionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobDefinitionContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/algorithms": {
            "delete": {
                "operationId": "DeleteDesignExplorationAlgorithms",
                "summary": "Delete design exploration algorithms",
                "description": "Delete one or more algorithms\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/algorithms\n- /api/v1/projects/`{project_id}`/algorithms/`{algorithm_id}`",
                "tags": [
                    "dx_algorithms",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetDesignExplorationAlgorithms",
                "summary": "Get design exploration algorithms",
                "description": "Query detailed information about design exploration algorithms\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/algorithms\n- /api/v1/projects/`{project_id}`/algorithms/`{algorithm_id}`",
                "tags": [
                    "dx_algorithms",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DesignExplorationAlgorithmContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateDesignExplorationAlgorithms",
                "summary": "Create design exploration algorithms",
                "description": "Create design exploration algorithms based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/algorithms\n- /api/v1/projects/`{project_id}`/algorithms/`{algorithm_id}`",
                "tags": [
                    "dx_algorithms",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DesignExplorationAlgorithmContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DesignExplorationAlgorithmContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyDesignExplorationAlgorithms",
                "summary": "Modify design exploration algorithms",
                "description": "Apply changes to the submitted properties of one or more design exploration algorithms.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/algorithms\n- /api/v1/projects/`{project_id}`/algorithms/`{algorithm_id}`",
                "tags": [
                    "dx_algorithms",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DesignExplorationAlgorithmContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DesignExplorationAlgorithmContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/jobs": {
            "delete": {
                "operationId": "DeleteJobs",
                "summary": "Delete jobs",
                "description": "Delete one or more jobs\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/jobs\n- /api/v1/projects/`{project_id}`/jobs:sync\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`:sync",
                "tags": [
                    "jobs",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetJobs",
                "summary": "Get jobs",
                "description": "Query detailed job information\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/jobs\n- /api/v1/projects/`{project_id}`/jobs:sync\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`:sync",
                "tags": [
                    "jobs",
                    "Project",
                    "JobDefinition"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    },
                    {
                        "in": "query",
                        "name": "values",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Query jobs by parameter values. The list is made up of value comparison expressions:\n\n  ...?values=param_1.eq=2.0,param_2=\"str\"\n\nOmitting the `.operator` part is the same as using `.eq`.\n"
                    },
                    {
                        "in": "query",
                        "name": "selection",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Return jobs belonging to the given selection(s).\nSupports `.in` and `.eq` operators. Not specifying an operator is the same as passing in `.eq`.\n\n    ...?selection=my_selection\n\n    ...?selection.in=[sel_1, sel_2]\n"
                    },
                    {
                        "in": "query",
                        "name": "algorithm_id",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Return jobs linked to the design exploration algorithm(s) with the given id.\nSupports `.in` and `.eq` operators. Not specifying an operator is the same as passing in `.eq`.\n\n    ...?algorithm_id=1\n\n    ...?algorithm_id.in=[1, 10]\n"
                    },
                    {
                        "in": "query",
                        "name": "job_definition_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Jobs Definition ID"
                    },
                    {
                        "in": "query",
                        "name": "eval_status",
                        "schema": {
                            "enum": [
                                "inactive",
                                "pending",
                                "prolog",
                                "running",
                                "evaluated",
                                "failed",
                                "aborted",
                                "timeout"
                            ],
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "CreateJobs",
                "summary": "Create jobs",
                "description": "Create jobs based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/jobs\n- /api/v1/projects/`{project_id}`/jobs:sync\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`:sync",
                "tags": [
                    "jobs",
                    "Project",
                    "JobDefinition"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "creation_method",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Jobs Creation Method"
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "a count"
                    },
                    {
                        "in": "query",
                        "name": "distribution",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Jobs Distribution"
                    },
                    {
                        "in": "query",
                        "name": "job_definition_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Jobs Definition ID"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "SyncJobs",
                "summary": "Synchronize jobs",
                "description": "Synchronize jobs\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/jobs\n- /api/v1/projects/`{project_id}`/jobs:sync\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`\n- /api/v1/projects/`{project_id}`/jobs/`{job_id}`:sync",
                "tags": [
                    "jobs",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ]
            }
        },
        "/api/v1/projects/{project_id}/job_selections": {
            "delete": {
                "operationId": "DeleteJobSelections",
                "summary": "Delete job selections",
                "description": "Delete one or more algorithms\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_selections\n- /api/v1/projects/`{project_id}`/job_selections/`{selection_id}`",
                "tags": [
                    "job_selections",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetJobSelections",
                "summary": "Get job selections",
                "description": "Query detailed information about job selections\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_selections\n- /api/v1/projects/`{project_id}`/job_selections/`{selection_id}`",
                "tags": [
                    "job_selections",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobSelectionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateJobSelections",
                "summary": "Create job selections",
                "description": "Create job selections based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_selections\n- /api/v1/projects/`{project_id}`/job_selections/`{selection_id}`",
                "tags": [
                    "job_selections",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobSelectionContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobSelectionContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyJobSelections",
                "summary": "Modify job selections",
                "description": "Apply changes to the submitted properties of one or more job selections.\nThe id must always be present. It can also be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/job_selections\n- /api/v1/projects/`{project_id}`/job_selections/`{selection_id}`",
                "tags": [
                    "job_selections",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobSelectionContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobSelectionContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/jobs/bulk_delete": {
            "post": {
                "operationId": "BulkDeleteJobs",
                "summary": "Bulk delete jobs",
                "description": "Delete a batch of jobs\n",
                "tags": [
                    "jobs",
                    "internal",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/jobs/{job_id}/prepare_download": {
            "put": {
                "operationId": "PrepareJobForDownload",
                "summary": "Prepare job files for download",
                "description": "Prepare one or multiple job files for download.\n- Create design-point-specific input files with parameter values replaced where needed\n- Create a zip archive with all job files requested.\nQuery will return the created file resource in a files list\n",
                "tags": [
                    "jobs",
                    "internal",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobDownload"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "path",
                        "name": "job_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the job to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/files": {
            "delete": {
                "operationId": "DeleteFiles",
                "summary": "Delete files",
                "description": "Delete one or more files\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/files\n- /api/v1/projects/`{project_id}`/files/`{file_id}`",
                "tags": [
                    "files",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetFiles",
                "summary": "Get files",
                "description": "Query detailed information about files\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/files\n- /api/v1/projects/`{project_id}`/files/`{file_id}`",
                "tags": [
                    "files",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateFiles",
                "summary": "Create files",
                "description": "Create files based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/files\n- /api/v1/projects/`{project_id}`/files/`{file_id}`",
                "tags": [
                    "files",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyFiles",
                "summary": "Modify files",
                "description": "Apply changes to the submitted properties of one or more files.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/files\n- /api/v1/projects/`{project_id}`/files/`{file_id}`",
                "tags": [
                    "files",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/tasks": {
            "get": {
                "operationId": "GetTasks",
                "summary": "Get tasks",
                "description": "Query detailed information about tasks\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/tasks\n- /api/v1/projects/`{project_id}`/tasks/`{task_id}`",
                "tags": [
                    "tasks",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateTasks",
                "summary": "Create tasks",
                "description": "Create tasks based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/tasks\n- /api/v1/projects/`{project_id}`/tasks/`{task_id}`",
                "tags": [
                    "tasks",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyTasks",
                "summary": "Modify tasks",
                "description": "Apply changes to the submitted properties of one or more tasks.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/tasks\n- /api/v1/projects/`{project_id}`/tasks/`{task_id}`",
                "tags": [
                    "tasks",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/tasks/query": {
            "post": {
                "operationId": "AdditionalTaskQuery",
                "summary": "Additional task query",
                "description": "Query detailed information about tasks using a POST request.\n\nArguments for the query should be provided within the JSON formatted body of the request.\n",
                "tags": [
                    "tasks",
                    "internal",
                    "WIP",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "AssignTasksToEvaluator",
                "summary": "Assign tasks to an evaluator",
                "description": "Find and assign tasks that match an evaluator's profile.\n\nArguments for the query should be provided within the JSON formatted body of the request.\n",
                "tags": [
                    "tasks",
                    "internal",
                    "WIP",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/tasks/license_context": {
            "put": {
                "operationId": "AssignLicenseContextIdToTasks",
                "summary": "Assign license context ID to tasks",
                "description": "Assign license context IDs to the given tasks\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/projects/`{project_id}`/tasks/license_context\n- /api/v1/projects/`{project_id}`/tasks/`{task_id}`/license_context",
                "tags": [
                    "tasks",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskLicenseContext"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{project_id}/license_contexts": {
            "delete": {
                "operationId": "RemoveLicenseEnvironment",
                "summary": "Remove a license environment",
                "description": "Remove a license context environment for a specific project.\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ]
            },
            "get": {
                "operationId": "RetrieveLicenseEnvironment",
                "summary": "Retrieve a license environment",
                "description": "Retrieve context environment defined for a project.\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LicenseContextContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ]
            },
            "post": {
                "operationId": "CreateAnsysHpcParametricLicenseContext",
                "summary": "Create a new Ansys HPC parametric license context",
                "description": "Creates a new license context to be used in evaluations of the given project. Returns the created license context\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ]
            },
            "put": {
                "operationId": "SetAnsysHpcParametricLicenseContext",
                "summary": "Set an existing Ansys HPC parametric license context",
                "description": "Set a license context to be used in evaluations of the given project. Returns the license context\n",
                "tags": [
                    "projects",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LicenseContextContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/evaluators": {
            "delete": {
                "operationId": "DeleteEvaluatorRegistrations",
                "summary": "Delete evaluator registrations",
                "description": "Delete one or more evaluator registrations\n\n\nAll available URIs:\n- /api/v1/evaluators\n- /api/v1/evaluators/`{evaluator_id}`",
                "tags": [
                    "evaluators"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                },
                "parameters": []
            },
            "get": {
                "operationId": "GetEvaluatorRegistrations",
                "summary": "Get evaluator registrations",
                "description": "Retrieve detailed information about registered evaluators\n\n\nAll available URIs:\n- /api/v1/evaluators\n- /api/v1/evaluators/`{evaluator_id}`",
                "tags": [
                    "evaluators"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorRegistrationContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    },
                    {
                        "in": "query",
                        "name": "time_window",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Time window for querying evaluators, in sec"
                    }
                ]
            },
            "put": {
                "operationId": "ModifyEvaluatorRegistration",
                "summary": "Modify evaluator registration",
                "description": "Create or modify evaluator registrations\n\n\nAll available URIs:\n- /api/v1/evaluators\n- /api/v1/evaluators/`{evaluator_id}`",
                "tags": [
                    "evaluators"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EvaluatorRegistrationContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EvaluatorRegistrationContainer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/operations": {
            "get": {
                "operationId": "GetOperation",
                "summary": "Get operation",
                "description": "Retrieve information about one or more operations\n\n\nAll available URIs:\n- /api/v1/operations\n- /api/v1/operations/`{operation_uuid}`",
                "tags": [
                    "operations"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OperationContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": []
            }
        },
        "/api/v1/task_definition_templates": {
            "delete": {
                "operationId": "DeleteTaskDefinitionTemplates",
                "summary": "Delete task definition templates",
                "description": "Delete one or more task definition templates\n\n\nAll available URIs:\n- /api/v1/task_definition_templates\n- /api/v1/task_definition_templates:apply\n- /api/v1/task_definition_templates/`{template_id}`",
                "tags": [
                    "task_definition_templates",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SourceIds"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetTaskDefinitionTemplates",
                "summary": "Get tasks definition templates",
                "description": "Query detailed information about task definition templates.\n\n\nAll available URIs:\n- /api/v1/task_definition_templates\n- /api/v1/task_definition_templates:apply\n- /api/v1/task_definition_templates/`{template_id}`",
                "tags": [
                    "task_definition_templates",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "any property name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Query objects by the selected property:\n\n    ...?evaluation_status=evaluated\n\nIn addition one of the operators `.in`, `.eq`, `.ne`, `.ge`, `.gt`, `.le`, `.lt`, `.contains` can be appended to the property name: \n\n    ...?fitness.le=1.0\n    ...?evaluation_status.in=failed,aborted,timeout"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Argument(s) to sort by. Prefixing with `-` (minus) denotes descending order"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Sets a limit on the maximum number of entries that will be returned by the query"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Applies and offset to the query"
                    }
                ]
            },
            "post": {
                "operationId": "CreateTaskDefinitionTemplates",
                "summary": "Create task definition templates",
                "description": "Create task definition templates based on the data provided. The 'id' will be automatically assigned by the server and cannot be forced by the client.\n\n\nAll available URIs:\n- /api/v1/task_definition_templates\n- /api/v1/task_definition_templates:apply\n- /api/v1/task_definition_templates/`{template_id}`",
                "tags": [
                    "task_definition_templates",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created. An ID has been assigned by the server.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            },
            "put": {
                "operationId": "ModifyTaskDefinitionTemplates",
                "summary": "Modify task definition templates",
                "description": "Apply changes to the submitted properties of one or more task definition templates.\nThe ID must always be present. It can optionally be provided as part of the URL.\nOnly the properties that are required to be modified should be supplied.\n\n\nAll available URIs:\n- /api/v1/task_definition_templates\n- /api/v1/task_definition_templates:apply\n- /api/v1/task_definition_templates/`{template_id}`",
                "tags": [
                    "task_definition_templates",
                    "Client",
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskContainer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Requested resource doesn't exist"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "project_id",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Identifier of the project to operate on",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "Only include the selected property (or properties) in the results\n\n    ...?fields=name,db_id,eval_status\nif one value is set to `all` then  all the existing properties will be requested."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskContainer"
                            }
                        }
                    }
                }
            }
        }
    },
    "openapi": "3.0.1"
}