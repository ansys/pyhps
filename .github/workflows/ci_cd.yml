name: GitHub CI
on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.7'
  DOC_PYTHON_VERSION: '3.9'
  DOCUMENTATION_CNAME: 'rep.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools tox
      - name: Test with tox
        run: tox -e style

  quick-tests:
    name: Quick tests and coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        cfg:
          - {python-version: "3.10", toxenv: "py310"}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.cfg.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools tox tox-gh-actions

      - name: Check out rep-deployments
        uses: actions/checkout@v3
        with:
          repository: ansys-internal/rep-deployments
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          submodules: true
          path: rep-deployments

      - uses: dawidd6/action-download-artifact@v2
        with:
          workflow: main.yaml
          name: docker-compose-internal
          path: docker-compose-artifact/
          branch: main
          repo: ansys-internal/rep-deployments
          workflow_conclusion: success           
          search_artifacts: false
          github_token: ${{secrets.PYANSYS_CI_BOT_TOKEN}}

      - uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login in Github Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io/ansys-internal
          username: pyansys-ci-bot
          password: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Start services
        run: |
          ls -la
          tar -xvzf docker-compose-internal.tar.gz
          cd docker-compose
          ls -ltaR
          FSGATEWAY_TAG=mpawlik-templates-and-scripts JMS_TAG=mpawlik-templates-and-scripts docker-compose pull
          FSGATEWAY_TAG=mpawlik-templates-and-scripts JMS_TAG=mpawlik-templates-and-scripts LOCALHOST_ADDR=localhost docker-compose up -d
          echo "Waiting few sec ..."
          sleep 30
        working-directory: ./docker-compose-artifact

      - name: file storage content
        if: always()
        run: |
          echo ""
          echo "====== housekeeper /root/.ansys/rep/jms/templates ====="
          docker exec ansys-rep-housekeeper-1 sh -c "ls -latR /root/.ansys/rep/jms/templates" 
          echo ""
          echo "===================="
          docker exec ansys-rep-fsgateway-1 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-fsgateway-1 sh -c "cat /file_storage/.owner.uuid"
          echo ""
          echo "===================="
          docker exec ansys-rep-fsgateway-2 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-fsgateway-2 sh -c "cat /file_storage/.owner.uuid"
          echo ""
          echo "===================="
          docker exec ansys-rep-jms-1 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-jms-1 sh -c "cat /file_storage/.owner.uuid"

      - name: Test with tox
        run: tox -e ${{ matrix.cfg.toxenv }}-noeval-coverage
        env:
          REP_TEST_URL: https://localhost:8443/rep
          REP_TEST_USERNAME: repadmin
          REP_TEST_PASSWORD: repadmin

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/test*.xml'
          check_name: Test Report ${{ matrix.os }}:${{ matrix.cfg.python-version }}
          detailed_summary: true
          include_passed: true
  
      - name: file storage content
        if: always()
        run: |
          echo ""
          echo "===================="
          docker exec ansys-rep-fsgateway-1 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-fsgateway-1 sh -c "cat /file_storage/.owner.uuid"
          echo ""
          echo "===================="
          docker exec ansys-rep-fsgateway-2 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-fsgateway-2 sh -c "cat /file_storage/.owner.uuid"
          echo ""
          echo "===================="
          docker exec ansys-rep-jms-1 sh -c "ls -ltaR /file_storage"
          docker exec ansys-rep-jms-1 sh -c "cat /file_storage/.owner.uuid"
      
      - name: jms logs
        if: always()
        run: |
          docker logs ansys-rep-jms-1
          docker logs ansys-rep-jms-2
        working-directory: ./docker-compose-artifact/docker-compose

      - name: fsgateway logs
        if: always()
        run: |
          docker logs ansys-rep-fsgateway-1
          docker logs ansys-rep-fsgateway-2
        working-directory: ./docker-compose-artifact/docker-compose

      - name: housekeeper logs
        if: always()
        run: |
          docker logs ansys-rep-housekeeper-1
        working-directory: ./docker-compose-artifact/docker-compose

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v
        working-directory: ./docker-compose-artifact/docker-compose

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    # needs: docs-style
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DOC_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools tox
      - name: Generate the documentation with tox
        run: tox -e doc
      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation-html
          path: build/sphinx/html
          retention-days: 7

  upload_dev_docs:
    name: "Upload dev documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [docs]
    steps:
      - name: Deploy the latest documentation
        uses: ansys/actions/doc-deploy-dev@v2
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and publish library
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies and build the library
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install -r requirements/requirements_build.txt
          python -m build venv wheel
          python -m twine check dist/*
      #- name: Upload to private PyPi
      #  if: github.ref == 'refs/heads/main'
      #  run: |
      #    python -m twine upload --verbose --skip-existing dist/*.whl
      #  env:
      #    TWINE_USERNAME: __token__
      #    TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
      #    TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyrep-package
          path: |
            dist/*.whl
          retention-days: 5

  release:
    name: "Release"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    needs: [build, docs]
    runs-on: ubuntu-latest
    steps:
      - name: "Release to GitHub"
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          # files: |
          #   dist/*.whl
          #   build/sphinx/html
